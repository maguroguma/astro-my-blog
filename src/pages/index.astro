---
import BaseLayout from '@/layouts/BaseLayout.astro';
import BlogPost from '@/components/BlogPost.astro';
import Tag from '@/components/Tag.astro';
import type { MarkdownBlogPost } from '@/scripts/types.ts';
import { aggregateTags, topTags } from '@/scripts/tag';

type Post = {
  url: string;
  frontmatter: MarkdownBlogPost;
};

const TOP_POSTS_NUM = 4;

const allPosts: Post[] = Object.values(
  import.meta.glob('@/pages/posts/**/*.md', { eager: true }),
);
const recentPosts = allPosts
  .sort(
    (a, b) =>
      new Date(b.frontmatter.pubDate).getTime() -
      new Date(a.frontmatter.pubDate).getTime(),
  )
  .slice(0, TOP_POSTS_NUM);

const recentTagsList = recentPosts.map((post) => post.frontmatter.tags);
const recentTags = aggregateTags(recentTagsList);

const globalTagsList = allPosts.map((post) => post.frontmatter.tags);
const globalTags = aggregateTags(globalTagsList);

const tags = topTags(recentTags, globalTags);

const pageTitle = 'Leverage Copy';
---

<BaseLayout pageTitle={pageTitle}>
  <p>maguroguma の思考の記録</p>

  <div class="posts-header">
    <h2>最新の投稿</h2>
    <a class="posts-link" href="/blog/"
      >すべての投稿を見る <i class="fa fa-angle-double-right"></i></a
    >
  </div>
  <div class="posts-grid">
    {
      recentPosts.map((post) => (
        <BlogPost url={post.url} post={post.frontmatter} />
      ))
    }
  </div>

  <h2>タグから探す</h2>
  <div class="tags">
    {tags.map((tag) => <Tag tag={tag.tag} count={tag.count} />)}
  </div>
</BaseLayout>

<style>
  .posts-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: baseline;
  }

  .posts-link {
    text-decoration: none;
    color: inherit;
  }

  .posts-grid {
    display: grid;
    /* グリッドの列を自動生成する */
    /* 高さは各行ごとに最大値が算出され、行の全アイテムに適用される */
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
  }
</style>
